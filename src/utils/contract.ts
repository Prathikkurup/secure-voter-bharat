import { BrowserProvider, Contract } from "ethers";

// Let TypeScript know about window.ethereum (MetaMask)
declare global {
  interface Window {
    ethereum?: any;
  }
}

// Your deployed contract address
const CONTRACT_ADDRESS = "0x1EE2D65c0B63C65aB40E11eEbB31CcBA29D17Cfa";

// ABI generated by Hardhat (make sure path is correct!)
import IdentityABI from "DeSoc/artifacts/contracts/IdentityContract.sol/Identity.json";

export const registerIdentity = async (
  name: string,
  aadharHash: string,
  panHash: string,
  drivingHash: string
) => {
  if (!window.ethereum) throw new Error("MetaMask not installed");

  // ✅ v6: BrowserProvider replaces Web3Provider
  const provider = new BrowserProvider(window.ethereum);

  // ✅ v6: getSigner() is async
  const signer = await provider.getSigner();

  // ✅ v6: Contract import comes directly from ethers
  const contract = new Contract(CONTRACT_ADDRESS, IdentityABI.abi, signer);

  // Call your contract function
  const tx = await contract.registerIdentity(name, aadharHash, panHash, drivingHash);

  // Wait for mining
  await tx.wait();

  return tx;
};
