/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IdentityContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addDocument"
      | "getDocument"
      | "isRegistered"
      | "registerProfile"
      | "updateProfile"
      | "verifyDocument"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DocumentAdded"
      | "DocumentVerified"
      | "ProfileCreated"
      | "ProfileUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addDocument",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDocument",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProfile",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProfile",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyDocument",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyDocument",
    data: BytesLike
  ): Result;
}

export namespace DocumentAddedEvent {
  export type InputTuple = [
    user: AddressLike,
    docType: BigNumberish,
    docNumberHash: string
  ];
  export type OutputTuple = [
    user: string,
    docType: bigint,
    docNumberHash: string
  ];
  export interface OutputObject {
    user: string;
    docType: bigint;
    docNumberHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DocumentVerifiedEvent {
  export type InputTuple = [user: AddressLike, docType: BigNumberish];
  export type OutputTuple = [user: string, docType: bigint];
  export interface OutputObject {
    user: string;
    docType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileCreatedEvent {
  export type InputTuple = [
    user: AddressLike,
    username: string,
    profileHash: string
  ];
  export type OutputTuple = [
    user: string,
    username: string,
    profileHash: string
  ];
  export interface OutputObject {
    user: string;
    username: string;
    profileHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    username: string,
    profileHash: string
  ];
  export type OutputTuple = [
    user: string,
    username: string,
    profileHash: string
  ];
  export interface OutputObject {
    user: string;
    username: string;
    profileHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IdentityContract extends BaseContract {
  connect(runner?: ContractRunner | null): IdentityContract;
  waitForDeployment(): Promise<this>;

  interface: IdentityContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addDocument: TypedContractMethod<
    [_docType: BigNumberish, _docNumberHash: string],
    [void],
    "nonpayable"
  >;

  getDocument: TypedContractMethod<
    [_user: AddressLike, _docType: BigNumberish],
    [[string, boolean]],
    "view"
  >;

  isRegistered: TypedContractMethod<[_user: AddressLike], [boolean], "view">;

  registerProfile: TypedContractMethod<
    [_username: string, _profileHash: string],
    [void],
    "nonpayable"
  >;

  updateProfile: TypedContractMethod<
    [_username: string, _profileHash: string],
    [void],
    "nonpayable"
  >;

  verifyDocument: TypedContractMethod<
    [_user: AddressLike, _docType: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addDocument"
  ): TypedContractMethod<
    [_docType: BigNumberish, _docNumberHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDocument"
  ): TypedContractMethod<
    [_user: AddressLike, _docType: BigNumberish],
    [[string, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[_user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerProfile"
  ): TypedContractMethod<
    [_username: string, _profileHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProfile"
  ): TypedContractMethod<
    [_username: string, _profileHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyDocument"
  ): TypedContractMethod<
    [_user: AddressLike, _docType: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DocumentAdded"
  ): TypedContractEvent<
    DocumentAddedEvent.InputTuple,
    DocumentAddedEvent.OutputTuple,
    DocumentAddedEvent.OutputObject
  >;
  getEvent(
    key: "DocumentVerified"
  ): TypedContractEvent<
    DocumentVerifiedEvent.InputTuple,
    DocumentVerifiedEvent.OutputTuple,
    DocumentVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "ProfileCreated"
  ): TypedContractEvent<
    ProfileCreatedEvent.InputTuple,
    ProfileCreatedEvent.OutputTuple,
    ProfileCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProfileUpdated"
  ): TypedContractEvent<
    ProfileUpdatedEvent.InputTuple,
    ProfileUpdatedEvent.OutputTuple,
    ProfileUpdatedEvent.OutputObject
  >;

  filters: {
    "DocumentAdded(address,uint8,string)": TypedContractEvent<
      DocumentAddedEvent.InputTuple,
      DocumentAddedEvent.OutputTuple,
      DocumentAddedEvent.OutputObject
    >;
    DocumentAdded: TypedContractEvent<
      DocumentAddedEvent.InputTuple,
      DocumentAddedEvent.OutputTuple,
      DocumentAddedEvent.OutputObject
    >;

    "DocumentVerified(address,uint8)": TypedContractEvent<
      DocumentVerifiedEvent.InputTuple,
      DocumentVerifiedEvent.OutputTuple,
      DocumentVerifiedEvent.OutputObject
    >;
    DocumentVerified: TypedContractEvent<
      DocumentVerifiedEvent.InputTuple,
      DocumentVerifiedEvent.OutputTuple,
      DocumentVerifiedEvent.OutputObject
    >;

    "ProfileCreated(address,string,string)": TypedContractEvent<
      ProfileCreatedEvent.InputTuple,
      ProfileCreatedEvent.OutputTuple,
      ProfileCreatedEvent.OutputObject
    >;
    ProfileCreated: TypedContractEvent<
      ProfileCreatedEvent.InputTuple,
      ProfileCreatedEvent.OutputTuple,
      ProfileCreatedEvent.OutputObject
    >;

    "ProfileUpdated(address,string,string)": TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;
    ProfileUpdated: TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;
  };
}
