/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IdentityInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "getIdentity"
      | "identities"
      | "registerIdentity"
      | "updateReputation"
      | "verifyIdentity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "IdentityRegistered"
      | "IdentityVerified"
      | "ReputationUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getIdentity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "identities",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerIdentity",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReputation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyIdentity",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "identities", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyIdentity",
    data: BytesLike
  ): Result;
}

export namespace IdentityRegisteredEvent {
  export type InputTuple = [user: AddressLike, name: string];
  export type OutputTuple = [user: string, name: string];
  export interface OutputObject {
    user: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IdentityVerifiedEvent {
  export type InputTuple = [user: AddressLike, status: boolean];
  export type OutputTuple = [user: string, status: boolean];
  export interface OutputObject {
    user: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationUpdatedEvent {
  export type InputTuple = [user: AddressLike, newScore: BigNumberish];
  export type OutputTuple = [user: string, newScore: bigint];
  export interface OutputObject {
    user: string;
    newScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Identity extends BaseContract {
  connect(runner?: ContractRunner | null): Identity;
  waitForDeployment(): Promise<this>;

  interface: IdentityInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  getIdentity: TypedContractMethod<
    [_user: AddressLike],
    [
      [string, string, string, string, bigint, boolean] & {
        name: string;
        aadharHash: string;
        panHash: string;
        drivingHash: string;
        reputationScore: bigint;
        verified: boolean;
      }
    ],
    "view"
  >;

  identities: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, string, bigint, boolean] & {
        name: string;
        aadharHash: string;
        panHash: string;
        drivingHash: string;
        reputationScore: bigint;
        verified: boolean;
      }
    ],
    "view"
  >;

  registerIdentity: TypedContractMethod<
    [
      _name: string,
      _aadharHash: string,
      _panHash: string,
      _drivingHash: string
    ],
    [void],
    "nonpayable"
  >;

  updateReputation: TypedContractMethod<
    [_user: AddressLike, _score: BigNumberish],
    [void],
    "nonpayable"
  >;

  verifyIdentity: TypedContractMethod<
    [_user: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getIdentity"
  ): TypedContractMethod<
    [_user: AddressLike],
    [
      [string, string, string, string, bigint, boolean] & {
        name: string;
        aadharHash: string;
        panHash: string;
        drivingHash: string;
        reputationScore: bigint;
        verified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "identities"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, string, bigint, boolean] & {
        name: string;
        aadharHash: string;
        panHash: string;
        drivingHash: string;
        reputationScore: bigint;
        verified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerIdentity"
  ): TypedContractMethod<
    [
      _name: string,
      _aadharHash: string,
      _panHash: string,
      _drivingHash: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateReputation"
  ): TypedContractMethod<
    [_user: AddressLike, _score: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyIdentity"
  ): TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "IdentityRegistered"
  ): TypedContractEvent<
    IdentityRegisteredEvent.InputTuple,
    IdentityRegisteredEvent.OutputTuple,
    IdentityRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "IdentityVerified"
  ): TypedContractEvent<
    IdentityVerifiedEvent.InputTuple,
    IdentityVerifiedEvent.OutputTuple,
    IdentityVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "ReputationUpdated"
  ): TypedContractEvent<
    ReputationUpdatedEvent.InputTuple,
    ReputationUpdatedEvent.OutputTuple,
    ReputationUpdatedEvent.OutputObject
  >;

  filters: {
    "IdentityRegistered(address,string)": TypedContractEvent<
      IdentityRegisteredEvent.InputTuple,
      IdentityRegisteredEvent.OutputTuple,
      IdentityRegisteredEvent.OutputObject
    >;
    IdentityRegistered: TypedContractEvent<
      IdentityRegisteredEvent.InputTuple,
      IdentityRegisteredEvent.OutputTuple,
      IdentityRegisteredEvent.OutputObject
    >;

    "IdentityVerified(address,bool)": TypedContractEvent<
      IdentityVerifiedEvent.InputTuple,
      IdentityVerifiedEvent.OutputTuple,
      IdentityVerifiedEvent.OutputObject
    >;
    IdentityVerified: TypedContractEvent<
      IdentityVerifiedEvent.InputTuple,
      IdentityVerifiedEvent.OutputTuple,
      IdentityVerifiedEvent.OutputObject
    >;

    "ReputationUpdated(address,uint256)": TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
    ReputationUpdated: TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
  };
}
