/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ReputationContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "decreaseReputation"
      | "getReputation"
      | "identityContract"
      | "increaseReputation"
      | "owner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ReputationDecreased" | "ReputationIncreased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "decreaseReputation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "identityContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseReputation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "decreaseReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "identityContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
}

export namespace ReputationDecreasedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    newScore: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, newScore: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    newScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationIncreasedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    newScore: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, newScore: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    newScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReputationContract extends BaseContract {
  connect(runner?: ContractRunner | null): ReputationContract;
  waitForDeployment(): Promise<this>;

  interface: ReputationContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decreaseReputation: TypedContractMethod<
    [_user: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getReputation: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  identityContract: TypedContractMethod<[], [string], "view">;

  increaseReputation: TypedContractMethod<
    [_user: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decreaseReputation"
  ): TypedContractMethod<
    [_user: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getReputation"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "identityContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "increaseReputation"
  ): TypedContractMethod<
    [_user: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ReputationDecreased"
  ): TypedContractEvent<
    ReputationDecreasedEvent.InputTuple,
    ReputationDecreasedEvent.OutputTuple,
    ReputationDecreasedEvent.OutputObject
  >;
  getEvent(
    key: "ReputationIncreased"
  ): TypedContractEvent<
    ReputationIncreasedEvent.InputTuple,
    ReputationIncreasedEvent.OutputTuple,
    ReputationIncreasedEvent.OutputObject
  >;

  filters: {
    "ReputationDecreased(address,uint256,uint256)": TypedContractEvent<
      ReputationDecreasedEvent.InputTuple,
      ReputationDecreasedEvent.OutputTuple,
      ReputationDecreasedEvent.OutputObject
    >;
    ReputationDecreased: TypedContractEvent<
      ReputationDecreasedEvent.InputTuple,
      ReputationDecreasedEvent.OutputTuple,
      ReputationDecreasedEvent.OutputObject
    >;

    "ReputationIncreased(address,uint256,uint256)": TypedContractEvent<
      ReputationIncreasedEvent.InputTuple,
      ReputationIncreasedEvent.OutputTuple,
      ReputationIncreasedEvent.OutputObject
    >;
    ReputationIncreased: TypedContractEvent<
      ReputationIncreasedEvent.InputTuple,
      ReputationIncreasedEvent.OutputTuple,
      ReputationIncreasedEvent.OutputObject
    >;
  };
}
